{"output":"Functional Dependencies\nInference for Dependent Types\nFully Fundamented Types\nCoercions\nObject-Oriented Programming with Fully Fundamented Types\nData Families\nScoped Type Variables\nRecursion Schemes\nType Families\nEmbedded Domain Specific Languages\nAda 2012\nSubtyping in Ada 2012\nOverloading in Ada 2012\nConstraints in Ada 2012\nAssertions in Ada 2012\nCompilation of Ada 2012\nTutorial on Scala Advanced Type Systems\nTutorial on Scala Advanced Type Systems - Full Package\nTutorial on Scala Advanced Type Systems - No Monads\nTutorial on Scala Advanced Type Systems - No Implicit Conversions\nTutorial on Scala Advanced Type Systems - No Implicit Parameters\nTutorial on Scala Advanced Type Systems - No Implicit Returns\n","title":"subtopic generation","version":"0"}
{"output":"Intuitionistic Types\nLevel-1 Type Systems\nLevel-2 Type Systems\nLevel-3 Type Systems\nLevel-4 Type Systems\nLevel-5 Type Systems\nMinimal Type Systems\nSemi-Formal Type Systems\nUnsafe Type Systems\nStrict Type Systems\nType-Based Search\nType-Based Comparison\nType-Based Optimization\nType-Theoretic Compilation \nType-Theoretic Machines\n","title":"subtopic generation","version":"0"}
{"output":"Type Theoretic Meta-Programming\nRecursion Schemes\nType Families\nDependent Haskell\nConstraint Handling Rules\nType Inference\nStrictness Analysis\nAgda\nCoq\nEpigram\nIdris\nLem\nLiquid Haskell\nNuprl\nNuPRL\nTwelf\n","title":"subtopic generation","version":"0"}
{"output":"Parametric Data Types\nProgramming with Types\nType Theory\nType Inference\nComputational Type Theory\nType Checking\nGeneric Programming\nRelational Programming\n","title":"subtopic generation","version":"0"}
{"output":"Undecidable Types\nWeak Constraints\nClosures\nSeparate Compilation\nLexically Scoped Type Variables\nPolymorphic Types\nType Classes\nInstantiation Schemes\nRecursive Types\nExponential Types\nLabelled Types\nHigher Kinds\nType Families\nFunctional Dependencies\nType Inference\n","title":"subtopic generation","version":"0"}
