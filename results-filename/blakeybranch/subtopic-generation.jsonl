{"output":"Impredicative Polymorphism\nRank-2 Types\nRank-n Types\nUnivalent Types\nType Families\nAlgebraic Data Types\nFunctional Dependencies\nLambda Calculus\nType Inference\nConstructor Classes\nParametric Polymorphism\nScoped Type Variables\nNon-Type Parameter Binders\nType Constructors\nCoercible\nRank-N Types\nUnboxed Type Variables\nImplicit Parameters\nQuantified Implicit Parameters\nExplicit Type Application\nFunctional Effects\nRich Coercions\nExistential Quantification\nDeriving Type Classes\nIn the first column is the\n","title":"subtopic generation","version":"0"}
{"output":"Coercive Types\nIntensional Types\nAcyclic Types\nLogic in Types\nTypes in Modules\nTypes in Classes\nTypes in Monads\nTypes in Effects\nIntensionality without Types\nIntensionality for the masses\nA Taste of Intensionality\nDependent Haskell\nThe Mu Type\nA Little Metaphysics\nPolymorphism and the Mu Type\nThe Essence of the Mu Type\nInstance Chains\nDeep Haskell\nThe Essence of Deep Haskell\nThe Essence of the Essence of Deep Haskell\nDeep Platonism\n","title":"subtopic generation","version":"0"}
{"output":"Stronger than Types\nClosed Type Families\nCubical Type Systems\nType Generics\nRecursive Type Definitions\nType Classes\nPolymorphic Types\nType Families\nExtensible Types\nType Inference\nFunctional Operators\nType Error and Type Checking\nType Less Polymorphism\nType Sharing\nType Constructors\nMonomorphic Type Classes\nType Constructor Classes\nEffect Handlers\nType Inference with No Class\nType-level programming\nType Families with No Classes\nType-level programming with No Classes\nTotal Functional Programming\nType-level programming with No Classes and No Data Kinds\nType-level programming with No Classes and no Data Kinds\nType-level programming with No Classes using Functional Dependencies\nType\n","title":"subtopic generation","version":"0"}
{"output":"Type Inference\nType Checking\nPolymorphism\nSubtyping\nSubstructural Type Systems\nDependent Types\nFunctional Dependencies\nType Families\nLambda Calculus\nCore Calculus\nGeneric Programming\nFoundational and Axiomatic Calculi\nSemantics\nProof Theory\nType Theory\nEpistemic Logic\nComputational Logic\nTheoretical Computer Science\nProcess Calculi\nIntelligent Systems\nAgent Systems\nLogics\nLogic Programming\nTheorem Proving\nComputation Models\nComputational Complexity\nFormal Verification\nAutomata Theory\nAutomata\n","title":"subtopic generation","version":"0"}
{"output":"Parametricity\nRecursion Schemes\nTerm Graph Rewriting\nType Families\nType Inference\nPromotable Constraints\nProgramming with Symbols\nExistential Types\nFree Theorems\nFreer Monads\nInductive-Recursive Types\nType-Level Programming\nHigher-Order Type Classes\nLawvere Theories\nLinear Types\nInductive Types\nType Theory\nLogic\nHigher Kinds\nSub-Ramified Type Families\nPartial Type Signatures\nExplicit Type Application\nGADTs\nKind Equalities\nExtended Algebraic Data Types\nData Types and Kinds\nTotal Languages\n","title":"subtopic generation","version":"0"}
